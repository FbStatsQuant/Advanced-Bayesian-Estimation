X%*%U+I_n
Hs <- horseshoesp(y, B, method.tau = c("halfCauchy"), s=0.3,
method.sigma = c("Jeffreys"), burn = 1000, nmc = 5000, thin = 1, alpha = 0.05)
U = Matrix::Diagonal(x = as.numeric(lambda_star^2)) %*% Matrix::t(X)
u=stats::rnorm(l2,l0,lambda_star)
v=X%*%u + stats::rnorm(n)
C=Matrix::Cholesky((X%*%U+I_n),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
v=Matrix::solve(t(L),Matrix::solve(L,((y/sqrt(sigma_sq))-v)))
Beta<-as.numeric(sqrt(sigma_sq)*(u+U%*%v))
devtools::document()
detach("package:horseshoesp", unload = TRUE)
unloadNamespace("horseshoesp")
remove.packages("horseshoesp")
devtools::install()
.rs.restartR()
library(horseshoesp)
library(horseshoesp)
library(readxl)
library(splines)
library(horseshoesp)
# Set the seed for reproducibility
set.seed(123)
# Parameters
n <- 1000  # Number of observations
phi <- 0.7  # Autoregressive coefficient
# Initialize the series
stationary_ar1 <- numeric(n)
stationary_ar1[1] <- rnorm(1)  # Starting value
# Generate AR(1) process
for (i in 2:n) {
stationary_ar1[i] <- phi * stationary_ar1[i-1] + rnorm(1)
}
# Plot the AR(1) series
plot.ts(stationary_ar1, main="Weakly Stationary AR(1) Time Series", ylab="Value", xlab="Time")
y <- stationary_ar1
x <- c(1:n)
J <- floor(n^b)
t <- c(0.98*min(x), 0.99*min(x), seq(1,n, length.out = J-4),max(x)*1.01, max(x)*1.02)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
Hs <- horseshoesp(y, B, method.tau = c("halfCauchy"), s=0.3,
method.sigma = c("Jeffreys"), burn = 1000, nmc = 5000, thin = 1, alpha = 0.05)
horseshoesp_ = function(y,X, method.tau = c("fixed", "truncatedCauchy","halfCauchy"), tau = 1,
method.sigma = c("fixed", "Jeffreys"), Sigma2 = 1, s=0.5,
burn = 1000, nmc = 5000, thin = 1, alpha = 0.05)
{
method.tau = match.arg(method.tau)
method.sigma = match.arg(method.sigma)
X= Matrix::Matrix(X, sparse = TRUE)
N=burn+nmc
effsamp=(N-burn)/thin
n=nrow(X)
p=ncol(X)
Beta=rep(0,p); lambda=rep(1,p)
sigma_sq = Sigma2;
## output ##
betaout=matrix(0,p,effsamp)
tauout=rep(0,effsamp)
sigmaSqout=rep(0,effsamp)
if (p > n) {
algo <- 1
} else {
algo <- 2
}
I_n=diag(n)
l0=rep(0,p)
l1=rep(1,n)
l2=rep(1,p)
if(algo==2)
{
Q_star=t(X)%*%X
}
for(i in 1:N){
#Beta
lambda_star <- tau * lambda
if(algo==1){
U = Matrix::Diagonal(x = as.numeric(lambda_star^2)) %*% Matrix::t(X)
u=stats::rnorm(l2,l0,lambda_star)
v=X%*%u + stats::rnorm(n)
C=Matrix::Cholesky((X%*%U+I_n),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
v=Matrix::solve(t(L),Matrix::solve(L,((y/sqrt(sigma_sq))-v)))
Beta<-as.numeric(sqrt(sigma_sq)*(u+U%*%v))
}
if(algo==2){
C=Matrix::Cholesky((1 / sigma_sq) * (Q_star + Diagonal(x = 1 / (lambda_star^2))),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
mu=Matrix::solve(t(L),
Matrix::solve(L,Matrix::crossprod(X, y)/sigma_sq))
u=Matrix::solve(t(L),stats::rnorm(p))
Beta=as.numeric(mu + u)
}
#Lambda
eta = 1/(lambda^2)
upsi = stats::runif(p,0,1/(1+eta))
tempps = Beta^2/(2*sigma_sq*tau^2)
ub = (1-upsi)/upsi
Fub = 1 - exp(-tempps*ub)
Fub[Fub < (1e-4)] = 1e-4;
up = stats::runif(p,0,Fub)
eta = -log(1-up)/tempps
lambda = 1/sqrt(eta);
##Tau
if(method.tau == "halfCauchy"){
tempt = sum((Beta/lambda)^2)/(2*sigma_sq)
et = 1/tau^2
utau = stats::runif(1,0,1/(1+et))
ubt = (1-utau)/utau
Fubt = stats::pgamma(ubt,(p+1)/2,scale=1/tempt)
Fubt = max(Fubt,1e-8) # for numerical stability
ut = stats::runif(1,0,Fubt)
et = stats::qgamma(ut,(p+1)/2,scale=1/tempt)
tau = max(1/sqrt(et), 1e-6)
}
if(method.tau == "truncatedCauchy"){
tempt = sum((Beta/lambda)^2)/(2*sigma_sq)
et = 1/tau^2
utau = stats::runif(1,0,1/(1+et))
ubt_1=1
ubt_2 = min((1-utau)/utau,p^(s))
Fubt_1 = stats::pgamma(ubt_1,(p+1)/2,scale=1/tempt)
Fubt_2 = stats::pgamma(ubt_2,(p+1)/2,scale=1/tempt)
ut = stats::runif(1,Fubt_1,Fubt_2)
et = stats::qgamma(ut,(p+1)/2,scale=1/tempt)
tau = max(1/sqrt(et), 1e-6)
}
#Sigma
if(method.sigma == "Jeffreys"){
if(algo==1)
{
E_1=max(t(y-X%*%Beta)%*%(y-X%*%Beta),(1e-8))
E_2=max(sum(Beta^2/((tau*lambda))^2),(1e-8))
}
else
{
E_1=max(t(y-X%*%Beta)%*%(y-X%*%Beta),1e-6)
E_2=max(sum(Beta^2/((tau*lambda))^2),1e-6)
}
sigma_sq=1/stats::rgamma(1,(n+p)/2,scale=2/(E_1+E_2))
} else {
sigma_sq=Sigma2
}
if(i > burn && i%%thin== 0)
{
betaout[,(i-burn)/thin] = Beta
tauout[(i-burn)/thin]=tau
sigmaSqout[(i-burn)/thin]=sigma_sq
}
}
pMean=apply(betaout,1,mean)
pMedian=apply(betaout,1,stats::median)
pSigma=mean(sigmaSqout)
pTau=mean(tauout)
result=list("BetaHat"=pMean, "BetaMedian"=pMedian,
"Sigma2Hat"=pSigma,"TauHat"=pTau)
return(result)
}
library(readxl)
library(splines)
library(horseshoesp)
# Set the seed for reproducibility
set.seed(123)
# Parameters
n <- 1000  # Number of observations
phi <- 0.7  # Autoregressive coefficient
# Initialize the series
stationary_ar1 <- numeric(n)
stationary_ar1[1] <- rnorm(1)  # Starting value
# Generate AR(1) process
for (i in 2:n) {
stationary_ar1[i] <- phi * stationary_ar1[i-1] + rnorm(1)
}
# Plot the AR(1) series
plot.ts(stationary_ar1, main="Weakly Stationary AR(1) Time Series", ylab="Value", xlab="Time")
y <- stationary_ar1
x <- c(1:n)
J <- floor(n^b)
t <- c(0.98*min(x), 0.99*min(x), seq(1,n, length.out = J-4),max(x)*1.01, max(x)*1.02)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
Hs <- horseshoesp_(y, B, method.tau = c("halfCauchy"), s=0.3,
method.sigma = c("Jeffreys"), burn = 1000, nmc = 5000, thin = 1, alpha = 0.05)
beta_hat <- as.vector(unlist(Hs[1]))
sqrt(MSE(y,as.numeric(B%*%beta_hat)))
plot(x,y, xlab = "Observarions",
ylab = "Value", col = "lightblue", main = "AR(1)", cex.main=2)
points(x,B%*%beta_hat, type = "l",
col = "red")
legend("topleft",
legend = c("Estimation", "Actual values"),
col = c("red", "lightblue"),
lty = c(1, 1))
X= Matrix::Matrix(X, sparse = TRUE)
N=burn+nmc
effsamp=(N-burn)/thin
n=nrow(X)
p=ncol(X)
Beta=rep(0,p); lambda=rep(1,p)
sigma_sq = Sigma2;
## output ##
betaout=matrix(0,p,effsamp)
tauout=rep(0,effsamp)
sigmaSqout=rep(0,effsamp)
if (p > n) {
algo <- 1
} else {
algo <- 2
}
I_n=diag(n)
l0=rep(0,p)
l1=rep(1,n)
l2=rep(1,p)
if(algo==2)
{
Q_star = Matrix::crossprod(X)
}
U = Matrix::Diagonal(x = as.numeric(lambda_star^2)) %*% Matrix::t(X)
u=stats::rnorm(l2,l0,lambda_star)
v=X%*%u + stats::rnorm(n)
C=Matrix::Cholesky((X%*%U+I_n),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
v=Matrix::solve(t(L),Matrix::solve(L,((y/sqrt(sigma_sq))-v)))
Beta<-as.numeric(sqrt(sigma_sq)*(u+U%*%v))
class(L)
class(t(L))
C=Matrix::Cholesky((1 / sigma_sq) * (Q_star + Diagonal(x = 1 / (lambda_star^2))),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
mu=Matrix::solve(t(L),
Matrix::solve(L,Matrix::crossprod(X, y)/sigma_sq))
u=Matrix::solve(t(L),stats::rnorm(p))
Beta=as.numeric(mu + u)
class(L)
class(t(L))
v
class(v)
Matrix::solve(L,((y/sqrt(sigma_sq))-v))
U = Matrix::Diagonal(x = as.numeric(lambda_star^2)) %*% Matrix::t(X)
u=stats::rnorm(l2,l0,lambda_star)
v=X%*%u + stats::rnorm(n)
C=Matrix::Cholesky((X%*%U+I_n),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
Matrix::solve(L,((y/sqrt(sigma_sq))-v))
class(Matrix::solve(L,((y/sqrt(sigma_sq))-v)))
class(solve(L,((y/sqrt(sigma_sq))-v)))
class(solve(L,((y/sqrt(sigma_sq))-v)))
solve(Matrix::solve(t(L),Matrix::solve(L,((y/sqrt(sigma_sq))-v))))
L
dim(L)
t(L)
dim(t(L))
U = Matrix::Diagonal(x = as.numeric(lambda_star^2)) %*% Matrix::t(X)
u=stats::rnorm(l2,l0,lambda_star)
v=X%*%u + stats::rnorm(n)
C=Matrix::Cholesky((X%*%U+I_n),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
rhs = matrix((y/sqrt(sigma_sq)) - v, ncol = 1)
z = Matrix::solve(L, rhs)
v = Matrix::solve(Matrix::t(L), z)
Beta=as.numeric(sqrt(sigma_sq)*(u+U%*%v))
class(rhs)
class(z)
Matrix::t()
Matrix::t(L)
class(v <- Matrix::solve(Matrix::t(L), z))
C=Matrix::Cholesky((1 / sigma_sq) * (Q_star + Diagonal(x = 1 / (lambda_star^2))),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
rhs=Matrix::crossprod(X, y) / sigma_sq
z=Matrix::solve(L, rhs)
mu=Matrix::solve(Matrix::t(L), z)
u=Matrix::solve(t(L),stats::rnorm(p))
class(u)
class(z)
mu=Matrix::solve(Matrix::t(L), as.numeric(z))
mu=Matrix::solve(Matrix::t(L), as.numeric(z))
class(mu)
rhs=Matrix::crossprod(X, y) / sigma_sq
z=Matrix::solve(L, as.numeric(rhs))
mu=Matrix::solve(Matrix::t(L), as.numeric(z))
u=Matrix::solve(t(L),stats::rnorm(p))
Beta=as.numeric(mu + u)
class(rhs)
class(z)
class(u)
class(Beta)
U = Matrix::Diagonal(x = as.numeric(lambda_star^2)) %*% Matrix::t(X)
u=stats::rnorm(l2,l0,lambda_star)
v=X%*%u + stats::rnorm(n)
C=Matrix::Cholesky((X%*%U+I_n),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
rhs = matrix((y/sqrt(sigma_sq)) - v, ncol = 1)
z = Matrix::solve(L, as.numeric(rhs))
class(z)
rhs = matrix((y/sqrt(sigma_sq)) - v, ncol = 1)
z = Matrix::solve(L, as.numeric(rhs))
v = Matrix::solve(Matrix::t(L), z)
Beta=as.numeric(sqrt(sigma_sq)*(u+U%*%v))
class(z)
class(v)
class(Beta)
horseshoesp_ = function(y,X, method.tau = c("fixed", "truncatedCauchy","halfCauchy"), tau = 1,
method.sigma = c("fixed", "Jeffreys"), Sigma2 = 1, s=0.5,
burn = 1000, nmc = 5000, thin = 1, alpha = 0.05)
{
method.tau = match.arg(method.tau)
method.sigma = match.arg(method.sigma)
X= Matrix::Matrix(X, sparse = TRUE)
N=burn+nmc
effsamp=(N-burn)/thin
n=nrow(X)
p=ncol(X)
Beta=rep(0,p); lambda=rep(1,p)
sigma_sq = Sigma2;
## output ##
betaout=matrix(0,p,effsamp)
tauout=rep(0,effsamp)
sigmaSqout=rep(0,effsamp)
if (p > n) {
algo <- 1
} else {
algo <- 2
}
I_n=diag(n)
l0=rep(0,p)
l1=rep(1,n)
l2=rep(1,p)
if(algo==2)
{
Q_star = Matrix::crossprod(X)
}
for(i in 1:N){
#Beta
lambda_star <- tau * lambda
if(algo==1){
U = Matrix::Diagonal(x = as.numeric(lambda_star^2)) %*% Matrix::t(X)
u=stats::rnorm(l2,l0,lambda_star)
v=X%*%u + stats::rnorm(n)
C=Matrix::Cholesky((X%*%U+I_n),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
rhs = matrix((y/sqrt(sigma_sq)) - v, ncol = 1)
z = Matrix::solve(L, as.numeric(rhs))
v = Matrix::solve(Matrix::t(L), z)
Beta=as.numeric(sqrt(sigma_sq)*(u+U%*%v))
}
if(algo==2){
C=Matrix::Cholesky((1 / sigma_sq) * (Q_star + Diagonal(x = 1 / (lambda_star^2))),
perm=FALSE, LDL=FALSE)
L=Matrix::sparseMatrix(i = as.integer(C@i) + 1,
p = as.integer(C@p),
x = as.numeric(C@x),
dims = c(as.integer(C@Dim[1]), as.integer(C@Dim[1])),
index1 = TRUE)
rhs=Matrix::crossprod(X, y) / sigma_sq
z=Matrix::solve(L, as.numeric(rhs))
mu=Matrix::solve(Matrix::t(L), as.numeric(z))
u=Matrix::solve(t(L),stats::rnorm(p))
Beta=as.numeric(mu + u)
}
#Lambda
eta = 1/(lambda^2)
upsi = stats::runif(p,0,1/(1+eta))
tempps = Beta^2/(2*sigma_sq*tau^2)
ub = (1-upsi)/upsi
Fub = 1 - exp(-tempps*ub)
Fub[Fub < (1e-4)] = 1e-4;
up = stats::runif(p,0,Fub)
eta = -log(1-up)/tempps
lambda = 1/sqrt(eta);
##Tau
if(method.tau == "halfCauchy"){
tempt = sum((Beta/lambda)^2)/(2*sigma_sq)
et = 1/tau^2
utau = stats::runif(1,0,1/(1+et))
ubt = (1-utau)/utau
Fubt = stats::pgamma(ubt,(p+1)/2,scale=1/tempt)
Fubt = max(Fubt,1e-8) # for numerical stability
ut = stats::runif(1,0,Fubt)
et = stats::qgamma(ut,(p+1)/2,scale=1/tempt)
tau = max(1/sqrt(et), 1e-6)
}
if(method.tau == "truncatedCauchy"){
tempt = sum((Beta/lambda)^2)/(2*sigma_sq)
et = 1/tau^2
utau = stats::runif(1,0,1/(1+et))
ubt_1=1
ubt_2 = min((1-utau)/utau,p^(s))
Fubt_1 = stats::pgamma(ubt_1,(p+1)/2,scale=1/tempt)
Fubt_2 = stats::pgamma(ubt_2,(p+1)/2,scale=1/tempt)
ut = stats::runif(1,Fubt_1,Fubt_2)
et = stats::qgamma(ut,(p+1)/2,scale=1/tempt)
tau = max(1/sqrt(et), 1e-6)
}
#Sigma
if(method.sigma == "Jeffreys"){
if(algo==1)
{
E_1=max(t(y-X%*%Beta)%*%(y-X%*%Beta),(1e-8))
E_2=max(sum(Beta^2/((tau*lambda))^2),(1e-8))
}
else
{
E_1=max(t(y-X%*%Beta)%*%(y-X%*%Beta),1e-6)
E_2=max(sum(Beta^2/((tau*lambda))^2),1e-6)
}
sigma_sq=1/stats::rgamma(1,(n+p)/2,scale=2/(E_1+E_2))
} else {
sigma_sq=Sigma2
}
if(i > burn && i%%thin== 0)
{
betaout[,(i-burn)/thin] = Beta
tauout[(i-burn)/thin]=tau
sigmaSqout[(i-burn)/thin]=sigma_sq
}
}
pMean=apply(betaout,1,mean)
pMedian=apply(betaout,1,stats::median)
pSigma=mean(sigmaSqout)
pTau=mean(tauout)
result=list("BetaHat"=pMean, "BetaMedian"=pMedian,
"Sigma2Hat"=pSigma,"TauHat"=pTau)
return(result)
}
library(readxl)
library(splines)
library(horseshoesp)
# Set the seed for reproducibility
set.seed(123)
# Parameters
n <- 1000  # Number of observations
phi <- 0.7  # Autoregressive coefficient
# Initialize the series
stationary_ar1 <- numeric(n)
stationary_ar1[1] <- rnorm(1)  # Starting value
# Generate AR(1) process
for (i in 2:n) {
stationary_ar1[i] <- phi * stationary_ar1[i-1] + rnorm(1)
}
# Plot the AR(1) series
plot.ts(stationary_ar1, main="Weakly Stationary AR(1) Time Series", ylab="Value", xlab="Time")
y <- stationary_ar1
x <- c(1:n)
J <- floor(n^b)
t <- c(0.98*min(x), 0.99*min(x), seq(1,n, length.out = J-4),max(x)*1.01, max(x)*1.02)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
Hs <- horseshoesp_(y, B, method.tau = c("halfCauchy"), s=0.3,
method.sigma = c("Jeffreys"), burn = 1000, nmc = 5000, thin = 1, alpha = 0.05)
beta_hat <- as.vector(unlist(Hs[1]))
sqrt(MSE(y,as.numeric(B%*%beta_hat)))
plot(x,y, xlab = "Observarions",
ylab = "Value", col = "lightblue", main = "AR(1)", cex.main=2)
points(x,B%*%beta_hat, type = "l",
col = "red")
legend("topleft",
legend = c("Estimation", "Actual values"),
col = c("red", "lightblue"),
lty = c(1, 1))
wd
