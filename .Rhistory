theme_minimal()
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
k <- 0.02
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- as.numeric(solve(precision_matrix, (1/sigma_sq) * crossprod(B, y)))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
mean(beta_hat1^2)
mean(theta^2)
library(ggplot2)
library(splines)
library(MLmetrics)
library(Hmisc)
library(Matrix)
library(tidyr)
library(dplyr)
library(glmnet)
n <- 2000
b <- (1/3)
set.seed(2024)
J <- floor(2*n^b)
J <- 100
x <- seq(0, 1, length.out = n)
f <- function(x) exp(-2 * x^2)
z <- f(x)
sd <- 0.30
sigma_sq <- sd^2
(SNR <- var(z)/sd^2)
y <- z + rnorm(n, mean = 0, sd = sd)
num_seeds <- 1
random_seeds <- sample(0:2000, num_seeds)
data <- data.frame(x = x, y = y, z = z)
ggplot(data, aes(x = x)) +
geom_line(aes(y = z), color = "blue") +
labs(x = "x", y = "y")
ggplot(data, aes(x = x)) +
geom_point(aes(y = y), color = "lightblue") +
geom_line(aes(y = z), color = "black") +
labs(title = "Function vs Random Points", x = "x", y = "y") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("lightblue", "black")) +
theme_minimal()
t <- c(-0.0002, -0.0001, seq(0,1, length.out = J),1.0001, 1.0002)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
X <- as.matrix(B)
ols_fit <- lm(y ~ X)
ols_coefs <- na.omit(coef(ols_fit))
tau_empirical <- mean(abs(ols_coefs))
tau_empirical
Hs1 <- horseshoesp(y, B, method.tau = c("halfCauchy"), Sigma2 = (sd)^2, tau=tau_empirical, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 6000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
# Create a data frame
plot_data <- data.frame(
x = x,
True_Function = z,
Estimated = as.numeric(B%*%beta_hat1)
)
# Plot
ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = True_Function), color = "red", linewidth = 0.8) +  # True function (line)
geom_point(aes(y = Estimated), color = "blue", size = 0.5, alpha = 0.5) +  # Estimates (points)
labs(
title = "True Function vs. Posterior Estimates",
x = "x",
y = "Value"
) +
theme_minimal()
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
k <- 0.02
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- as.numeric(solve(precision_matrix, (1/sigma_sq) * crossprod(B, y)))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
mean(beta_hat1^2)
mean(theta^2)
library(ggplot2)
library(splines)
library(MLmetrics)
library(Hmisc)
library(Matrix)
library(tidyr)
library(dplyr)
library(glmnet)
n <- 2000
b <- (1/3)
set.seed(2024)
J <- floor(2*n^b)
J <- 1000
x <- seq(0, 1, length.out = n)
f <- function(x) exp(-2 * x^2)
z <- f(x)
sd <- 0.30
sigma_sq <- sd^2
(SNR <- var(z)/sd^2)
y <- z + rnorm(n, mean = 0, sd = sd)
num_seeds <- 1
random_seeds <- sample(0:2000, num_seeds)
data <- data.frame(x = x, y = y, z = z)
ggplot(data, aes(x = x)) +
geom_line(aes(y = z), color = "blue") +
labs(x = "x", y = "y")
ggplot(data, aes(x = x)) +
geom_point(aes(y = y), color = "lightblue") +
geom_line(aes(y = z), color = "black") +
labs(title = "Function vs Random Points", x = "x", y = "y") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("lightblue", "black")) +
theme_minimal()
t <- c(-0.0002, -0.0001, seq(0,1, length.out = J),1.0001, 1.0002)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
X <- as.matrix(B)
ols_fit <- lm(y ~ X)
ols_coefs <- na.omit(coef(ols_fit))
tau_empirical <- mean(abs(ols_coefs))
tau_empirical
Hs1 <- horseshoesp(y, B, method.tau = c("halfCauchy"), Sigma2 = (sd)^2, tau=tau_empirical, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 6000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
# Create a data frame
plot_data <- data.frame(
x = x,
True_Function = z,
Estimated = as.numeric(B%*%beta_hat1)
)
# Plot
ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = True_Function), color = "red", linewidth = 0.8) +  # True function (line)
geom_point(aes(y = Estimated), color = "blue", size = 0.5, alpha = 0.5) +  # Estimates (points)
labs(
title = "True Function vs. Posterior Estimates",
x = "x",
y = "Value"
) +
theme_minimal()
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
k <- 0.02
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- as.numeric(solve(precision_matrix, (1/sigma_sq) * crossprod(B, y)))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
mean(beta_hat1^2)
mean(theta^2)
library(ggplot2)
library(splines)
library(MLmetrics)
library(Hmisc)
library(Matrix)
library(tidyr)
library(dplyr)
library(glmnet)
n <- 2000
b <- (1/3)
set.seed(2024)
J <- floor(2*n^b)
J <- 1500
x <- seq(0, 1, length.out = n)
f <- function(x) exp(-2 * x^2)
z <- f(x)
sd <- 0.30
sigma_sq <- sd^2
(SNR <- var(z)/sd^2)
y <- z + rnorm(n, mean = 0, sd = sd)
num_seeds <- 1
random_seeds <- sample(0:2000, num_seeds)
data <- data.frame(x = x, y = y, z = z)
ggplot(data, aes(x = x)) +
geom_line(aes(y = z), color = "blue") +
labs(x = "x", y = "y")
ggplot(data, aes(x = x)) +
geom_point(aes(y = y), color = "lightblue") +
geom_line(aes(y = z), color = "black") +
labs(title = "Function vs Random Points", x = "x", y = "y") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("lightblue", "black")) +
theme_minimal()
t <- c(-0.0002, -0.0001, seq(0,1, length.out = J),1.0001, 1.0002)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
X <- as.matrix(B)
ols_fit <- lm(y ~ X)
ols_coefs <- na.omit(coef(ols_fit))
tau_empirical <- mean(abs(ols_coefs))
tau_empirical
Hs1 <- horseshoesp(y, B, method.tau = c("halfCauchy"), Sigma2 = (sd)^2, tau=tau_empirical, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 6000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
# Create a data frame
plot_data <- data.frame(
x = x,
True_Function = z,
Estimated = as.numeric(B%*%beta_hat1)
)
# Plot
ggplot(plot_data, aes(x = x)) +
geom_line(aes(y = True_Function), color = "red", linewidth = 0.8) +  # True function (line)
geom_point(aes(y = Estimated), color = "blue", size = 0.5, alpha = 0.5) +  # Estimates (points)
labs(
title = "True Function vs. Posterior Estimates",
x = "x",
y = "Value"
) +
theme_minimal()
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
k <- 0.02
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- as.numeric(solve(precision_matrix, (1/sigma_sq) * crossprod(B, y)))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
mean(beta_hat1^2)
mean(theta^2)
library(ggplot2)
library(splines)
library(MLmetrics)
library(Hmisc)
library(Matrix)
library(tidyr)
library(dplyr)
library(glmnet)
library(horseshoe)
n <- 2000
b <- (1/3)
set.seed(2024)
J <- floor(2*n^b)
J <- 200
x <- seq(0, 1, length.out = n)
s <- function(m, x) {
sqrt(2) * sum(seq(m)^(-1.5) * sin(seq(m)) * cos(((seq(m)) - 0.5) * pi * x))
}
z <- vector()
for (j in 1:n) {
z[j] <- s(1000, j / n)
}
sd <- 0.3
sigma_sq <- sd^2
(SNR <- var(z)/sd^2)
y <- z + rnorm(n, mean = 0, sd = sd)
num_seeds <- 1
random_seeds <- sample(0:2000, num_seeds)
data <- data.frame(x = x, y = y, z = z)
ggplot(data, aes(x = x)) +
geom_line(aes(y = z), color = "blue") +
labs(x = "x", y = "y")
ggplot(data, aes(x = x)) +
geom_point(aes(y = y), color = "lightblue") +
geom_line(aes(y = z), color = "black") +
labs(title = "Function vs Random Points", x = "x", y = "y") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("lightblue", "black")) +
theme_minimal()
t <- c(-0.0002, -0.0001, seq(0,1, length.out = J),1.0001, 1.0002)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
X <- as.matrix(B)
ols_fit <- lm(y ~ X)
ols_coefs <- na.omit(coef(ols_fit))
tau_empirical <- mean(abs(ols_coefs))
tau_empirical
Hs1 <- horseshoesp(y, B, method.tau = c("halfCauchy"), Sigma2 = (sd)^2, tau=tau_empirical, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
mean(beta_hat1^2)
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=0.1, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=0.2, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=0.3, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=0.4, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=0.5, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=0.6, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=0.8, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1.0, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1.2, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1.4, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1.6, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1.6, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
n <- 2000
b <- (1/3)
set.seed(2024)
J <- floor(2*n^b)
J <- 100
x <- seq(0, 1, length.out = n)
s <- function(m, x) {
sqrt(2) * sum(seq(m)^(-1.5) * sin(seq(m)) * cos(((seq(m)) - 0.5) * pi * x))
}
z <- vector()
for (j in 1:n) {
z[j] <- s(1000, j / n)
}
sd <- 0.3
sigma_sq <- sd^2
(SNR <- var(z)/sd^2)
y <- z + rnorm(n, mean = 0, sd = sd)
num_seeds <- 1
random_seeds <- sample(0:2000, num_seeds)
data <- data.frame(x = x, y = y, z = z)
ggplot(data, aes(x = x)) +
geom_line(aes(y = z), color = "blue") +
labs(x = "x", y = "y")
ggplot(data, aes(x = x)) +
geom_point(aes(y = y), color = "lightblue") +
geom_line(aes(y = z), color = "black") +
labs(title = "Function vs Random Points", x = "x", y = "y") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("lightblue", "black")) +
theme_minimal()
t <- c(-0.0002, -0.0001, seq(0,1, length.out = J),1.0001, 1.0002)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
X <- as.matrix(B)
ols_fit <- lm(y ~ X)
ols_coefs <- na.omit(coef(ols_fit))
tau_empirical <- mean(abs(ols_coefs))
tau_empirical
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1.6, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1.8, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=2, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
beta_hat1
theta
library(ggplot2)
library(splines)
library(MLmetrics)
library(Hmisc)
library(Matrix)
library(tidyr)
library(dplyr)
library(glmnet)
library(horseshoe)
n <- 2000
b <- (1/3)
set.seed(2024)
J <- floor(2*n^b)
J <- 200
x <- seq(0, 1, length.out = n)
s <- function(m, x) {
sqrt(2) * sum(seq(m)^(-1.5) * sin(seq(m)) * cos(((seq(m)) - 0.5) * pi * x))
}
z <- vector()
for (j in 1:n) {
z[j] <- s(1000, j / n)
}
sd <- 0.3
sigma_sq <- sd^2
(SNR <- var(z)/sd^2)
y <- z + rnorm(n, mean = 0, sd = sd)
num_seeds <- 1
random_seeds <- sample(0:2000, num_seeds)
data <- data.frame(x = x, y = y, z = z)
ggplot(data, aes(x = x)) +
geom_line(aes(y = z), color = "blue") +
labs(x = "x", y = "y")
ggplot(data, aes(x = x)) +
geom_point(aes(y = y), color = "lightblue") +
geom_line(aes(y = z), color = "black") +
labs(title = "Function vs Random Points", x = "x", y = "y") +
theme(plot.title = element_text(size = 16)) +
scale_color_manual(values = c("lightblue", "black")) +
theme_minimal()
t <- c(-0.0002, -0.0001, seq(0,1, length.out = J),1.0001, 1.0002)
Sp_order <- 3
B <- splineDesign(t, x, ord = Sp_order, outer.ok = TRUE,
sparse = TRUE)
X <- as.matrix(B)
ols_fit <- lm(y ~ X)
ols_coefs <- na.omit(coef(ols_fit))
tau_empirical <- mean(abs(ols_coefs))
tau_empirical
Hs1 <- horseshoesp(y, B, method.tau = c("fixed"), Sigma2 = (sd)^2, tau=1, s=2,
method.sigma = c("fixed"), burn = 1000, nmc = 7000, thin = 1)
beta_hat1 <- as.vector(unlist(Hs1[1]))
Hs1$TauHat
k <- cv.glmnet(B,z, alpha=0, nfolds = 20)$lambda.min
precision_matrix <- (1/((sigma_sq)/k) * diag(ncol(B)) + (1/sigma_sq) * crossprod(B))
theta <- solve(precision_matrix, (1/sigma_sq) * crossprod(B, y))
MSE(z,as.numeric(B%*%beta_hat1))
MSE(z, as.numeric(B%*%theta))
theta
